
#ifndef RANGES_V3_VIEW_TRANSFORM_HPP
#define RANGES_V3_VIEW_TRANSFORM_HPP
template<class Rngs>
class interleave_view : public view_facade<interleave_view<Rngs>> {
    friend range_access;
    std::vector<range_value_type_t<Rngs>> rngs_;
    struct cursor;
    cursor begin_cursor() {
        return {0, &rngs_, view::transform(rngs_, ranges::begin)};
    }
public:
    interleave_view() = default;
    explicit interleave_view(Rngs rngs)
      : rngs_(std::move(rngs))
    {}
};

template<class Rngs>
struct interleave_view<Rngs>::cursor  {
    std::size_t n_;
    std::vector<range_value_type_t<Rngs>> *rngs_;
    std::vector<iterator_t<range_value_type_t<Rngs>>> its_;
    decltype(auto) read() const {
        return *its_[n_];
    }
    void next() {
        if(0 == ((++n_) %= its_.size()))
            for_each(its_, [](auto& it){ ++it; });
    }
    bool equal(default_sentinel) const {
        return n_ == 0 && its_.end() != mismatch(its_, *rngs_,
            std::not_equal_to<>(), ident(), ranges::end).in1();
    }
    CONCEPT_REQUIRES(ForwardRange<range_value_type_t<Rngs>>())
    bool equal(cursor const& that) const {
        return n_ == that.n_ && its_ == that.its_;
    }
};

// In:  Range<Range<T>>
// Out: Range<T>, flattened by walking the ranges
//                round-robin fashion.
auto interleave() {
    return make_pipeable([](auto&& rngs) {
        using Rngs = decltype(rngs);
        return interleave_view<view::all_t<Rngs>>(
            view::all(std::forward<Rngs>(rngs)));
    });
}

// In:  Range<Range<T>>
// Out: Range<Range<T>>, transposing the rows and columns.
auto transpose() {
    return make_pipeable([](auto&& rngs) {
        using Rngs = decltype(rngs);
        CONCEPT_ASSERT(ForwardRange<Rngs>());
        return std::forward<Rngs>(rngs)
            | interleave()
            | chunk(static_cast<std::size_t>(distance(rngs)));
    });
}
