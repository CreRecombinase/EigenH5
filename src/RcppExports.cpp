// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/EigenH5.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// read_matrix_rl
Rcpp::List read_matrix_rl(const std::string filename, const std::string datapath, SEXP rows, SEXP cols);
RcppExport SEXP _EigenH5_read_matrix_rl(SEXP filenameSEXP, SEXP datapathSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_matrix_rl(filename, datapath, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// read_matrix_v
SEXP read_matrix_v(const std::string filename, const std::string datapath, SEXP rows, SEXP cols);
RcppExport SEXP _EigenH5_read_matrix_v(SEXP filenameSEXP, SEXP datapathSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_matrix_v(filename, datapath, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// read_vector_v
SEXP read_vector_v(const std::string filename, const std::string datapath, SEXP rows);
RcppExport SEXP _EigenH5_read_vector_v(SEXP filenameSEXP, SEXP datapathSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vector_v(filename, datapath, rows));
    return rcpp_result_gen;
END_RCPP
}
// update_matrix_v
void update_matrix_v(Rcpp::RObject data, const std::string filename, const std::string datapath, SEXP rows, SEXP cols);
RcppExport SEXP _EigenH5_update_matrix_v(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cols(colsSEXP);
    update_matrix_v(data, filename, datapath, rows, cols);
    return R_NilValue;
END_RCPP
}
// update_vector_v
void update_vector_v(Rcpp::RObject data, const std::string filename, const std::string datapath, SEXP rows);
RcppExport SEXP _EigenH5_update_vector_v(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rows(rowsSEXP);
    update_vector_v(data, filename, datapath, rows);
    return R_NilValue;
END_RCPP
}
// read_tibble_h5
SEXP read_tibble_h5(std::string filename, Rcpp::StringVector datapath, Rcpp::List options);
RcppExport SEXP _EigenH5_read_tibble_h5(SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_tibble_h5(filename, datapath, options));
    return rcpp_result_gen;
END_RCPP
}
// openFileHandleRead
std::string openFileHandleRead(const std::string filepath);
static SEXP _EigenH5_openFileHandleRead_try(SEXP filepathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type filepath(filepathSEXP);
    rcpp_result_gen = Rcpp::wrap(openFileHandleRead(filepath));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_openFileHandleRead(SEXP filepathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_openFileHandleRead_try(filepathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// closeFileHandle
size_t closeFileHandle(const std::string fh);
static SEXP _EigenH5_closeFileHandle_try(SEXP fhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type fh(fhSEXP);
    rcpp_result_gen = Rcpp::wrap(closeFileHandle(fh));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_closeFileHandle(SEXP fhSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_closeFileHandle_try(fhSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// has_blosc
bool has_blosc();
static SEXP _EigenH5_has_blosc_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(has_blosc());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_has_blosc() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_has_blosc_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// has_lzf
bool has_lzf();
static SEXP _EigenH5_has_lzf_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(has_lzf());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_has_lzf() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_has_lzf_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// start_blosc
void start_blosc();
static SEXP _EigenH5_start_blosc_try() {
BEGIN_RCPP
    start_blosc();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_start_blosc() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_start_blosc_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// check_blosc
bool check_blosc();
static SEXP _EigenH5_check_blosc_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(check_blosc());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_check_blosc() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_check_blosc_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// len
int len(RObject x);
RcppExport SEXP _EigenH5_len(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(len(x));
    return rcpp_result_gen;
END_RCPP
}
// permutation_order
Rcpp::List permutation_order(const Rcpp::List options, Rcpp::IntegerVector dims);
RcppExport SEXP _EigenH5_permutation_order(SEXP optionsSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type options(optionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(permutation_order(options, dims));
    return rcpp_result_gen;
END_RCPP
}
// read_vector
SEXP read_vector(std::string filename, std::string datapath, Rcpp::List options);
RcppExport SEXP _EigenH5_read_vector(SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vector(filename, datapath, options));
    return rcpp_result_gen;
END_RCPP
}
// read_matrix
SEXP read_matrix(std::string filename, std::string datapath, const Rcpp::List options);
RcppExport SEXP _EigenH5_read_matrix(SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_matrix(filename, datapath, options));
    return rcpp_result_gen;
END_RCPP
}
// update_matrix
bool update_matrix(RObject data, const std::string filename, std::string datapath, const Rcpp::List& options);
RcppExport SEXP _EigenH5_update_matrix(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_matrix(data, filename, datapath, options));
    return rcpp_result_gen;
END_RCPP
}
// update_vector
bool update_vector(RObject data, std::string filename, std::string datapath, Rcpp::List options);
RcppExport SEXP _EigenH5_update_vector(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_vector(data, filename, datapath, options));
    return rcpp_result_gen;
END_RCPP
}
// write_attribute_h5
bool write_attribute_h5(const RObject& data, const std::string& filename, std::string datapath);
RcppExport SEXP _EigenH5_write_attribute_h5(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RObject& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(write_attribute_h5(data, filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// read_R_attribute_h5
SEXP read_R_attribute_h5(const std::string& filename, std::string datapath);
RcppExport SEXP _EigenH5_read_R_attribute_h5(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_R_attribute_h5(filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// read_attribute_h5
SEXP read_attribute_h5(const std::string& filename, std::string datapath);
RcppExport SEXP _EigenH5_read_attribute_h5(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_attribute_h5(filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// create_dataset_h5
bool create_dataset_h5(const std::string& filename, std::string datapath, const RObject& data, Rcpp::List options);
RcppExport SEXP _EigenH5_create_dataset_h5(SEXP filenameSEXP, SEXP datapathSEXP, SEXP dataSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(create_dataset_h5(filename, datapath, data, options));
    return rcpp_result_gen;
END_RCPP
}
// fast_str2int
Rcpp::IntegerVector fast_str2int(Rcpp::StringVector input, int offset, const std::string prefix, const int na_val);
RcppExport SEXP _EigenH5_fast_str2int(SEXP inputSEXP, SEXP offsetSEXP, SEXP prefixSEXP, SEXP na_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< const std::string >::type prefix(prefixSEXP);
    Rcpp::traits::input_parameter< const int >::type na_val(na_valSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_str2int(input, offset, prefix, na_val));
    return rcpp_result_gen;
END_RCPP
}
// fast_str2ascii
Rcpp::IntegerVector fast_str2ascii(Rcpp::StringVector input, int offset);
RcppExport SEXP _EigenH5_fast_str2ascii(SEXP inputSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_str2ascii(input, offset));
    return rcpp_result_gen;
END_RCPP
}
// link_objects_h5
void link_objects_h5(Rcpp::StringVector filename_from, const std::string filename_to, Rcpp::StringVector datapath_from, Rcpp::StringVector datapath_to);
RcppExport SEXP _EigenH5_link_objects_h5(SEXP filename_fromSEXP, SEXP filename_toSEXP, SEXP datapath_fromSEXP, SEXP datapath_toSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type filename_from(filename_fromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type filename_to(filename_toSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type datapath_from(datapath_fromSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type datapath_to(datapath_toSEXP);
    link_objects_h5(filename_from, filename_to, datapath_from, datapath_to);
    return R_NilValue;
END_RCPP
}
// create_file_h5
void create_file_h5(const std::string filename);
RcppExport SEXP _EigenH5_create_file_h5(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    create_file_h5(filename);
    return R_NilValue;
END_RCPP
}
// dataset_chunks
Rcpp::IntegerVector dataset_chunks(const std::string filename, const std::string datapath);
RcppExport SEXP _EigenH5_dataset_chunks(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(dataset_chunks(filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// extend_dataset
void extend_dataset(const std::string filename, const std::string datapath, Rcpp::IntegerVector newdims);
RcppExport SEXP _EigenH5_extend_dataset(SEXP filenameSEXP, SEXP datapathSEXP, SEXP newdimsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type newdims(newdimsSEXP);
    extend_dataset(filename, datapath, newdims);
    return R_NilValue;
END_RCPP
}
// extend_dataset_by
void extend_dataset_by(const std::string filename, const std::string datapath, Rcpp::IntegerVector newdims);
RcppExport SEXP _EigenH5_extend_dataset_by(SEXP filenameSEXP, SEXP datapathSEXP, SEXP newdimsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type newdims(newdimsSEXP);
    extend_dataset_by(filename, datapath, newdims);
    return R_NilValue;
END_RCPP
}
// get_datset_filter
Rcpp::List get_datset_filter(const std::string filename, const std::string datapath);
RcppExport SEXP _EigenH5_get_datset_filter(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(get_datset_filter(filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// guess_chunks
Rcpp::IntegerVector guess_chunks(const std::vector<int> dimsize);
RcppExport SEXP _EigenH5_guess_chunks(SEXP dimsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int> >::type dimsize(dimsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(guess_chunks(dimsize));
    return rcpp_result_gen;
END_RCPP
}
// exists_h5
bool exists_h5(const std::string filename, const std::string groupname, const std::string dataname);
RcppExport SEXP _EigenH5_exists_h5(SEXP filenameSEXP, SEXP groupnameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(exists_h5(filename, groupname, dataname));
    return rcpp_result_gen;
END_RCPP
}
// isObject
bool isObject(const std::string filename, std::string dataname);
RcppExport SEXP _EigenH5_isObject(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(isObject(filename, dataname));
    return rcpp_result_gen;
END_RCPP
}
// ArrayTypeSize
int ArrayTypeSize(const std::string filename, std::string dataname);
RcppExport SEXP _EigenH5_ArrayTypeSize(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(ArrayTypeSize(filename, dataname));
    return rcpp_result_gen;
END_RCPP
}
// isDataSet
bool isDataSet(const std::string filename, std::string dataname);
RcppExport SEXP _EigenH5_isDataSet(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(isDataSet(filename, dataname));
    return rcpp_result_gen;
END_RCPP
}
// isGroup_h5
bool isGroup_h5(const std::string filename, std::string dataname);
RcppExport SEXP _EigenH5_isGroup_h5(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(isGroup_h5(filename, dataname));
    return rcpp_result_gen;
END_RCPP
}
// ls_h5
Rcpp::StringVector ls_h5(const std::string filename, Rcpp::CharacterVector groupname, bool full_names);
RcppExport SEXP _EigenH5_ls_h5(SEXP filenameSEXP, SEXP groupnameSEXP, SEXP full_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< bool >::type full_names(full_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(ls_h5(filename, groupname, full_names));
    return rcpp_result_gen;
END_RCPP
}
// typeof_h5
Rcpp::StringVector typeof_h5(const std::string filename, const std::string datapath);
RcppExport SEXP _EigenH5_typeof_h5(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(typeof_h5(filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// info_h5
Rcpp::List info_h5(const Rcpp::StringVector filename, Rcpp::StringVector datapaths);
RcppExport SEXP _EigenH5_info_h5(SEXP filenameSEXP, SEXP datapathsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type datapaths(datapathsSEXP);
    rcpp_result_gen = Rcpp::wrap(info_h5(filename, datapaths));
    return rcpp_result_gen;
END_RCPP
}
// file_acc_ct
Rcpp::DataFrame file_acc_ct(const std::string filename);
RcppExport SEXP _EigenH5_file_acc_ct(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(file_acc_ct(filename));
    return rcpp_result_gen;
END_RCPP
}
// dim_h5
Rcpp::IntegerVector dim_h5(const std::string& filename, const std::string datapath);
RcppExport SEXP _EigenH5_dim_h5(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(dim_h5(filename, datapath));
    return rcpp_result_gen;
END_RCPP
}
// concat_mats
void concat_mats(const std::string newfile, const std::string newpath, Rcpp::List selections, int margin);
RcppExport SEXP _EigenH5_concat_mats(SEXP newfileSEXP, SEXP newpathSEXP, SEXP selectionsSEXP, SEXP marginSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type newfile(newfileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type newpath(newpathSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type selections(selectionsSEXP);
    Rcpp::traits::input_parameter< int >::type margin(marginSEXP);
    concat_mats(newfile, newpath, selections, margin);
    return R_NilValue;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _EigenH5_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::string(*openFileHandleRead)(const std::string)");
        signatures.insert("size_t(*closeFileHandle)(const std::string)");
        signatures.insert("bool(*has_blosc)()");
        signatures.insert("bool(*has_lzf)()");
        signatures.insert("void(*start_blosc)()");
        signatures.insert("bool(*check_blosc)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _EigenH5_RcppExport_registerCCallable() { 
    R_RegisterCCallable("EigenH5", "_EigenH5_openFileHandleRead", (DL_FUNC)_EigenH5_openFileHandleRead_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_closeFileHandle", (DL_FUNC)_EigenH5_closeFileHandle_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_has_blosc", (DL_FUNC)_EigenH5_has_blosc_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_has_lzf", (DL_FUNC)_EigenH5_has_lzf_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_start_blosc", (DL_FUNC)_EigenH5_start_blosc_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_check_blosc", (DL_FUNC)_EigenH5_check_blosc_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_RcppExport_validate", (DL_FUNC)_EigenH5_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_EigenH5_read_matrix_rl", (DL_FUNC) &_EigenH5_read_matrix_rl, 4},
    {"_EigenH5_read_matrix_v", (DL_FUNC) &_EigenH5_read_matrix_v, 4},
    {"_EigenH5_read_vector_v", (DL_FUNC) &_EigenH5_read_vector_v, 3},
    {"_EigenH5_update_matrix_v", (DL_FUNC) &_EigenH5_update_matrix_v, 5},
    {"_EigenH5_update_vector_v", (DL_FUNC) &_EigenH5_update_vector_v, 4},
    {"_EigenH5_read_tibble_h5", (DL_FUNC) &_EigenH5_read_tibble_h5, 3},
    {"_EigenH5_openFileHandleRead", (DL_FUNC) &_EigenH5_openFileHandleRead, 1},
    {"_EigenH5_closeFileHandle", (DL_FUNC) &_EigenH5_closeFileHandle, 1},
    {"_EigenH5_has_blosc", (DL_FUNC) &_EigenH5_has_blosc, 0},
    {"_EigenH5_has_lzf", (DL_FUNC) &_EigenH5_has_lzf, 0},
    {"_EigenH5_start_blosc", (DL_FUNC) &_EigenH5_start_blosc, 0},
    {"_EigenH5_check_blosc", (DL_FUNC) &_EigenH5_check_blosc, 0},
    {"_EigenH5_len", (DL_FUNC) &_EigenH5_len, 1},
    {"_EigenH5_permutation_order", (DL_FUNC) &_EigenH5_permutation_order, 2},
    {"_EigenH5_read_vector", (DL_FUNC) &_EigenH5_read_vector, 3},
    {"_EigenH5_read_matrix", (DL_FUNC) &_EigenH5_read_matrix, 3},
    {"_EigenH5_update_matrix", (DL_FUNC) &_EigenH5_update_matrix, 4},
    {"_EigenH5_update_vector", (DL_FUNC) &_EigenH5_update_vector, 4},
    {"_EigenH5_write_attribute_h5", (DL_FUNC) &_EigenH5_write_attribute_h5, 3},
    {"_EigenH5_read_R_attribute_h5", (DL_FUNC) &_EigenH5_read_R_attribute_h5, 2},
    {"_EigenH5_read_attribute_h5", (DL_FUNC) &_EigenH5_read_attribute_h5, 2},
    {"_EigenH5_create_dataset_h5", (DL_FUNC) &_EigenH5_create_dataset_h5, 4},
    {"_EigenH5_fast_str2int", (DL_FUNC) &_EigenH5_fast_str2int, 4},
    {"_EigenH5_fast_str2ascii", (DL_FUNC) &_EigenH5_fast_str2ascii, 2},
    {"_EigenH5_link_objects_h5", (DL_FUNC) &_EigenH5_link_objects_h5, 4},
    {"_EigenH5_create_file_h5", (DL_FUNC) &_EigenH5_create_file_h5, 1},
    {"_EigenH5_dataset_chunks", (DL_FUNC) &_EigenH5_dataset_chunks, 2},
    {"_EigenH5_extend_dataset", (DL_FUNC) &_EigenH5_extend_dataset, 3},
    {"_EigenH5_extend_dataset_by", (DL_FUNC) &_EigenH5_extend_dataset_by, 3},
    {"_EigenH5_get_datset_filter", (DL_FUNC) &_EigenH5_get_datset_filter, 2},
    {"_EigenH5_guess_chunks", (DL_FUNC) &_EigenH5_guess_chunks, 1},
    {"_EigenH5_exists_h5", (DL_FUNC) &_EigenH5_exists_h5, 3},
    {"_EigenH5_isObject", (DL_FUNC) &_EigenH5_isObject, 2},
    {"_EigenH5_ArrayTypeSize", (DL_FUNC) &_EigenH5_ArrayTypeSize, 2},
    {"_EigenH5_isDataSet", (DL_FUNC) &_EigenH5_isDataSet, 2},
    {"_EigenH5_isGroup_h5", (DL_FUNC) &_EigenH5_isGroup_h5, 2},
    {"_EigenH5_ls_h5", (DL_FUNC) &_EigenH5_ls_h5, 3},
    {"_EigenH5_typeof_h5", (DL_FUNC) &_EigenH5_typeof_h5, 2},
    {"_EigenH5_info_h5", (DL_FUNC) &_EigenH5_info_h5, 2},
    {"_EigenH5_file_acc_ct", (DL_FUNC) &_EigenH5_file_acc_ct, 1},
    {"_EigenH5_dim_h5", (DL_FUNC) &_EigenH5_dim_h5, 2},
    {"_EigenH5_concat_mats", (DL_FUNC) &_EigenH5_concat_mats, 4},
    {"_EigenH5_RcppExport_registerCCallable", (DL_FUNC) &_EigenH5_RcppExport_registerCCallable, 0},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_EigenH5(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
