// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/EigenH5.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// start_blosc
void start_blosc();
static SEXP _EigenH5_start_blosc_try() {
BEGIN_RCPP
    start_blosc();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_start_blosc() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_start_blosc_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// check_blosc
bool check_blosc();
static SEXP _EigenH5_check_blosc_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(check_blosc());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_check_blosc() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_check_blosc_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// is_transposed
bool is_transposed(const std::string filename, const std::string groupname, const std::string dataname);
static SEXP _EigenH5_is_transposed_try(SEXP filenameSEXP, SEXP groupnameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(is_transposed(filename, groupname, dataname));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_is_transposed(SEXP filenameSEXP, SEXP groupnameSEXP, SEXP datanameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_is_transposed_try(filenameSEXP, groupnameSEXP, datanameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// len
int len(RObject x);
static SEXP _EigenH5_len_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(len(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_len(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_len_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// read_vector
SEXP read_vector(std::string filename, std::string datapath, Rcpp::List subset);
static SEXP _EigenH5_read_vector_try(SEXP filenameSEXP, SEXP datapathSEXP, SEXP subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type subset(subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(read_vector(filename, datapath, subset));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_read_vector(SEXP filenameSEXP, SEXP datapathSEXP, SEXP subsetSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_read_vector_try(filenameSEXP, datapathSEXP, subsetSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// read_matrix
SEXP read_matrix(std::string filename, std::string datapath, const Rcpp::List subset);
static SEXP _EigenH5_read_matrix_try(SEXP filenameSEXP, SEXP datapathSEXP, SEXP subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type subset(subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(read_matrix(filename, datapath, subset));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_read_matrix(SEXP filenameSEXP, SEXP datapathSEXP, SEXP subsetSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_read_matrix_try(filenameSEXP, datapathSEXP, subsetSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// update_matrix
bool update_matrix(RObject data, const std::string filename, const std::string datapath, const Rcpp::List& options);
static SEXP _EigenH5_update_matrix_try(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_matrix(data, filename, datapath, options));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_update_matrix(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_update_matrix_try(dataSEXP, filenameSEXP, datapathSEXP, optionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// update_vector
bool update_vector(RObject data, std::string filename, std::string datapath, Rcpp::List options);
static SEXP _EigenH5_update_vector_try(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< RObject >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_vector(data, filename, datapath, options));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_update_vector(SEXP dataSEXP, SEXP filenameSEXP, SEXP datapathSEXP, SEXP optionsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_update_vector_try(dataSEXP, filenameSEXP, datapathSEXP, optionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// create_dataset
bool create_dataset(const std::string& filename, const std::string datapath, const RObject& data, Rcpp::List options);
static SEXP _EigenH5_create_dataset_try(SEXP filenameSEXP, SEXP datapathSEXP, SEXP dataSEXP, SEXP optionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    Rcpp::traits::input_parameter< const RObject& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type options(optionsSEXP);
    rcpp_result_gen = Rcpp::wrap(create_dataset(filename, datapath, data, options));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_create_dataset(SEXP filenameSEXP, SEXP datapathSEXP, SEXP dataSEXP, SEXP optionsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_create_dataset_try(filenameSEXP, datapathSEXP, dataSEXP, optionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// split_ldd
Rcpp::IntegerMatrix split_ldd(const std::vector<int>& region_ids);
RcppExport SEXP _EigenH5_split_ldd(SEXP region_idsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type region_ids(region_idsSEXP);
    rcpp_result_gen = Rcpp::wrap(split_ldd(region_ids));
    return rcpp_result_gen;
END_RCPP
}
// guess_chunks
Rcpp::IntegerVector guess_chunks(const std::vector<int> dimsize);
static SEXP _EigenH5_guess_chunks_try(SEXP dimsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<int> >::type dimsize(dimsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(guess_chunks(dimsize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_guess_chunks(SEXP dimsizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_guess_chunks_try(dimsizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// exists_h5
bool exists_h5(const std::string filename, const std::string groupname, const std::string dataname);
static SEXP _EigenH5_exists_h5_try(SEXP filenameSEXP, SEXP groupnameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(exists_h5(filename, groupname, dataname));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_exists_h5(SEXP filenameSEXP, SEXP groupnameSEXP, SEXP datanameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_exists_h5_try(filenameSEXP, groupnameSEXP, datanameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// isObject
bool isObject(const std::string filename, std::string dataname);
static SEXP _EigenH5_isObject_try(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(isObject(filename, dataname));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_isObject(SEXP filenameSEXP, SEXP datanameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_isObject_try(filenameSEXP, datanameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// isDataSet
bool isDataSet(const std::string filename, std::string dataname);
static SEXP _EigenH5_isDataSet_try(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(isDataSet(filename, dataname));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_isDataSet(SEXP filenameSEXP, SEXP datanameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_isDataSet_try(filenameSEXP, datanameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// isGroup
bool isGroup(const std::string filename, std::string dataname);
static SEXP _EigenH5_isGroup_try(SEXP filenameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dataname(datanameSEXP);
    rcpp_result_gen = Rcpp::wrap(isGroup(filename, dataname));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_isGroup(SEXP filenameSEXP, SEXP datanameSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_isGroup_try(filenameSEXP, datanameSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ls_h5
Rcpp::StringVector ls_h5(const std::string h5filepath, Rcpp::CharacterVector groupname, bool full_names);
static SEXP _EigenH5_ls_h5_try(SEXP h5filepathSEXP, SEXP groupnameSEXP, SEXP full_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type h5filepath(h5filepathSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< bool >::type full_names(full_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(ls_h5(h5filepath, groupname, full_names));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_ls_h5(SEXP h5filepathSEXP, SEXP groupnameSEXP, SEXP full_namesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_ls_h5_try(h5filepathSEXP, groupnameSEXP, full_namesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// typeof_h5
Rcpp::StringVector typeof_h5(const std::string& filename, const std::string& datapath);
static SEXP _EigenH5_typeof_h5_try(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(typeof_h5(filename, datapath));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_typeof_h5(SEXP filenameSEXP, SEXP datapathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_typeof_h5_try(filenameSEXP, datapathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// dim_h5
Rcpp::IntegerVector dim_h5(const std::string& filename, const std::string datapath);
static SEXP _EigenH5_dim_h5_try(SEXP filenameSEXP, SEXP datapathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datapath(datapathSEXP);
    rcpp_result_gen = Rcpp::wrap(dim_h5(filename, datapath));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _EigenH5_dim_h5(SEXP filenameSEXP, SEXP datapathSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_EigenH5_dim_h5_try(filenameSEXP, datapathSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _EigenH5_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*start_blosc)()");
        signatures.insert("bool(*check_blosc)()");
        signatures.insert("bool(*is_transposed)(const std::string,const std::string,const std::string)");
        signatures.insert("int(*len)(RObject)");
        signatures.insert("SEXP(*read_vector)(std::string,std::string,Rcpp::List)");
        signatures.insert("SEXP(*read_matrix)(std::string,std::string,const Rcpp::List)");
        signatures.insert("bool(*update_matrix)(RObject,const std::string,const std::string,const Rcpp::List&)");
        signatures.insert("bool(*update_vector)(RObject,std::string,std::string,Rcpp::List)");
        signatures.insert("bool(*create_dataset)(const std::string&,const std::string,const RObject&,Rcpp::List)");
        signatures.insert("Rcpp::IntegerVector(*guess_chunks)(const std::vector<int>)");
        signatures.insert("bool(*exists_h5)(const std::string,const std::string,const std::string)");
        signatures.insert("bool(*isObject)(const std::string,std::string)");
        signatures.insert("bool(*isDataSet)(const std::string,std::string)");
        signatures.insert("bool(*isGroup)(const std::string,std::string)");
        signatures.insert("Rcpp::StringVector(*ls_h5)(const std::string,Rcpp::CharacterVector,bool)");
        signatures.insert("Rcpp::StringVector(*typeof_h5)(const std::string&,const std::string&)");
        signatures.insert("Rcpp::IntegerVector(*dim_h5)(const std::string&,const std::string)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _EigenH5_RcppExport_registerCCallable() { 
    R_RegisterCCallable("EigenH5", "_EigenH5_start_blosc", (DL_FUNC)_EigenH5_start_blosc_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_check_blosc", (DL_FUNC)_EigenH5_check_blosc_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_is_transposed", (DL_FUNC)_EigenH5_is_transposed_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_len", (DL_FUNC)_EigenH5_len_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_read_vector", (DL_FUNC)_EigenH5_read_vector_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_read_matrix", (DL_FUNC)_EigenH5_read_matrix_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_update_matrix", (DL_FUNC)_EigenH5_update_matrix_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_update_vector", (DL_FUNC)_EigenH5_update_vector_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_create_dataset", (DL_FUNC)_EigenH5_create_dataset_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_guess_chunks", (DL_FUNC)_EigenH5_guess_chunks_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_exists_h5", (DL_FUNC)_EigenH5_exists_h5_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_isObject", (DL_FUNC)_EigenH5_isObject_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_isDataSet", (DL_FUNC)_EigenH5_isDataSet_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_isGroup", (DL_FUNC)_EigenH5_isGroup_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_ls_h5", (DL_FUNC)_EigenH5_ls_h5_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_typeof_h5", (DL_FUNC)_EigenH5_typeof_h5_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_dim_h5", (DL_FUNC)_EigenH5_dim_h5_try);
    R_RegisterCCallable("EigenH5", "_EigenH5_RcppExport_validate", (DL_FUNC)_EigenH5_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_EigenH5_start_blosc", (DL_FUNC) &_EigenH5_start_blosc, 0},
    {"_EigenH5_check_blosc", (DL_FUNC) &_EigenH5_check_blosc, 0},
    {"_EigenH5_is_transposed", (DL_FUNC) &_EigenH5_is_transposed, 3},
    {"_EigenH5_len", (DL_FUNC) &_EigenH5_len, 1},
    {"_EigenH5_read_vector", (DL_FUNC) &_EigenH5_read_vector, 3},
    {"_EigenH5_read_matrix", (DL_FUNC) &_EigenH5_read_matrix, 3},
    {"_EigenH5_update_matrix", (DL_FUNC) &_EigenH5_update_matrix, 4},
    {"_EigenH5_update_vector", (DL_FUNC) &_EigenH5_update_vector, 4},
    {"_EigenH5_create_dataset", (DL_FUNC) &_EigenH5_create_dataset, 4},
    {"_EigenH5_split_ldd", (DL_FUNC) &_EigenH5_split_ldd, 1},
    {"_EigenH5_guess_chunks", (DL_FUNC) &_EigenH5_guess_chunks, 1},
    {"_EigenH5_exists_h5", (DL_FUNC) &_EigenH5_exists_h5, 3},
    {"_EigenH5_isObject", (DL_FUNC) &_EigenH5_isObject, 2},
    {"_EigenH5_isDataSet", (DL_FUNC) &_EigenH5_isDataSet, 2},
    {"_EigenH5_isGroup", (DL_FUNC) &_EigenH5_isGroup, 2},
    {"_EigenH5_ls_h5", (DL_FUNC) &_EigenH5_ls_h5, 3},
    {"_EigenH5_typeof_h5", (DL_FUNC) &_EigenH5_typeof_h5, 2},
    {"_EigenH5_dim_h5", (DL_FUNC) &_EigenH5_dim_h5, 2},
    {"_EigenH5_RcppExport_registerCCallable", (DL_FUNC) &_EigenH5_RcppExport_registerCCallable, 0},
    {"run_testthat_tests",                    (DL_FUNC) &run_testthat_tests,                    0},
    {NULL, NULL, 0}
};

RcppExport void R_init_EigenH5(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
